// src/backend/syncJobs.jsw
// Versión refactorizada para usar con jobs.config.json
import wixData from 'wix-data';
import { storage } from 'wix-storage';
import {
    getModifiedProducts,
    getBookingsStatus,
    getExchangeRates,
    getBulkLocations,
} from 'backend/viatorAPI.jsw';

// Función helper para guardar datos
async function saveData(collectionId, items) {
    if (!Array.isArray(items) || items.length === 0) {
        console.log(`[Sync] No hay nuevos items para guardar en ${collectionId}.`);
        return { saved: 0, errors: 0 };
    }
    try {
        const result = await wixData.bulkSave(collectionId, items, { suppressHooks: true });
        console.log(`[Sync] Se guardaron ${result.insertedItemIds.length} items y se actualizaron ${result.updatedItemIds.length} en ${collectionId}.`);
        return { saved: result.insertedItemIds.length + result.updatedItemIds.length, errors: result.errors.length };
    } catch (error) {
        console.error(`[Sync] Error al guardar datos en ${collectionId}:`, error);
        return { saved: 0, errors: items.length };
    }
}

// Las funciones ahora se exportan directamente. La programación se define en jobs.config.json.
export async function syncProducts() {
    console.log("--- [Cron Job] Iniciando syncProducts ---");
    const lastSyncKey = 'lastProductSyncTimestamp';
    try {
        let lastSyncDate = await storage.getItem(lastSyncKey);
        if (!lastSyncDate) {
            lastSyncDate = '2000-01-01T00:00:00Z';
            console.log(`[Sync] Primera sincronización de productos. Usando fecha por defecto: ${lastSyncDate}`);
        } else {
            console.log(`[Sync] Sincronizando productos modificados desde: ${lastSyncDate}`);
        }
        const syncStartTime = new Date();
        const products = await getModifiedProducts(lastSyncDate);
        const result = await saveData('ViatorProducts', products);
        if (result.errors === 0 && products.length > 0) { // Solo actualiza si hubo productos y no hubo errores
            await storage.setItem(lastSyncKey, syncStartTime.toISOString());
            console.log(`[Sync] Fecha de última sincronización actualizada a: ${syncStartTime.toISOString()}`);
        } else if(result.errors > 0) {
            console.error(`[Sync] No se actualizó la fecha de sincronización debido a ${result.errors} errores al guardar.`);
        }
    } catch (error) {
        console.error("[Cron Job] Falló la sincronización de productos:", error);
    } finally {
        console.log("--- [Cron Job] Finalizando syncProducts ---");
    }
}

export async function syncBookings() {
    console.log("--- [Cron Job] Iniciando syncBookings ---");
    try {
        // NOTA: Aún necesita la lógica de 'memoria'
        const bookings = await getBookingsStatus();
        await saveData('ViatorBookings', bookings);
    } catch (error) {
        console.error("[Cron Job] Falló la sincronización de reservas:", error);
    } finally {
        console.log("--- [Cron Job] Finalizando syncBookings ---");
    }
}

export async function syncRates() {
    console.log("--- [Cron Job] Iniciando syncRates ---");
    try {
        const rates = await getExchangeRates();
        await saveData('ViatorExchangeRates', rates);
    } catch (error) {
        console.error("[Cron Job] Falló la sincronización de tipos de cambio:", error);
    } finally {
        console.log("--- [Cron Job] Finalizando syncRates ---");
    }
}

export async function syncLocations() {
    console.log("--- [Cron Job] Iniciando syncLocations ---");
    try {
        const locations = await getBulkLocations();
        await saveData('ViatorLocations', locations);
    } catch (error) {
        console.error("[Cron Job] Falló la sincronización de ubicaciones:", error);
    } finally {
        console.log("--- [Cron Job] Finalizando syncLocations ---");
    }
}
